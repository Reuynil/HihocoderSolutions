#include <iostream>
#include <string>
#include <iomanip>	//should be deleted.

using namespace std;

double matrix[1000][500];
double value[500];
int n, m;	// n means column and m means row.

void triangleMatrix()
{
	for (int i = 0;i < m; i++)
	{
		int j=0;
		if (matrix[i][i] == 0)
		{
			for (j = i + 1;j < m;j++)
			{
				if (matrix[j][i] != 0)
				{
					for (int k = 0;k <= n;k++)
					{
						double temp = 0;
						temp = matrix[i][k];
						matrix[i][k] = matrix[j][k];
						matrix[j][k] = temp;
					}
				}
			}
		}
		if (j == m)
			continue;
		for (j = i + 1;j < m;j++)
		{
			if (matrix[j][i] == 0)
			{
				continue;
			}
			double cofficient = matrix[i][i] / matrix[j][i];
			for (int k = 0;k < n + 1;k++)
			{
				matrix[j][k] = matrix[j][k] * cofficient - matrix[i][k];
			}
		}
	}
}

string judge(int& rankA, int& rankC)
{
	string reslut;
	int i = m - 1;
	rankC = 0;
	rankA = 0;
	for (;i >= 0;i--)
	{
		int j = 0;
		while (j < n)
		{
			if (matrix[i][j] != 0)
			{
				rankC++;
				rankA++;
				break;
			}
			j++;
		}
		if (j == n && matrix[i][n] != 0)
		{
			rankA++;
		}
	}
	if (rankC < rankA)
	{
		return "No solutions";
	}
	if (rankC == rankA)
	{
		if (rankC == n)
		{
			return "One solution";
		}
		else
		{
			return "Many solutions";
		}
	}
}

void solution()
{
	int i = n - 1;
	for (;i >= 0;i--)
	{
		for (int j = n - 1;j > i;j--)
		{
			matrix[i][n] = matrix[i][n] - matrix[i][j] * value[j];
		}
		value[i] = matrix[i][n] / matrix[i][i];
	}
}

//delete this function before committing.
void print()
{
	for (int i = 0;i < m;i++)
	{
		for (int j = 0;j < n + 1;j++)
		{
			cout << setw(10) << setprecision(3) << matrix[i][j];
		}
		cout << endl;
	}
}

int main()
{
	
	cin >> n >> m;
	for (int i = 0; i < m; ++i)
	{
		for (int j = 0; j < n+1; ++j)
		{
			cin >> matrix[i][j];
		}
	}
	triangleMatrix();
	//print();	//delete it.
	int ra = 0, rc = 0;
	string res=judge(ra,rc);
	//cout << res << endl;
	if (res != "One solution")
	{
		cout << res << endl;
	}
	else
	{
		solution();
		for (int i = 0;i < n;i++)
		{
			cout << (int)(value[i] + 0.5) << endl;
		}
	}
	return 0;
}